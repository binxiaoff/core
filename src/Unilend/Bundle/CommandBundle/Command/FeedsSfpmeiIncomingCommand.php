<?php

namespace Unilend\Bundle\CommandBundle\Command;

use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\{Input\InputInterface, Input\InputOption, Output\OutputInterface};
use Unilend\Entity\{Clients, ClientsGestionTypeNotif, EcheanciersEmprunteur, Notifications, Operation, Prelevements, Projects, ProjectsStatus, Receptions, SepaRejectionReason, Users, Wallet,
    WalletBalanceHistory, WalletType};
use Unilend\Bundle\CoreBusinessBundle\Service\Simulator\EntityManager as EntityManagerSimulator;

class FeedsSfpmeiIncomingCommand extends ContainerAwareCommand
{
    const FILE_ROOT_NAME                 = 'UNILEND-00040631007-';
    const FRENCH_BANK_TRANSFER_BNPP_CODE = '0568';

    /** @var LoggerInterface */
    private $logger;

    /** @var EntityManagerSimulator */
    private $entityManagerSimulator;

    protected function configure()
    {
        $this
            ->setName('feeds:sfpmei_incoming')
            ->setDescription('Process the incoming files generated by SFPMEI')
            ->addOption('force-replay', 'f', InputOption::VALUE_NONE, 'To force the cron to replay.')
            ->setHelp(<<<EOF
The <info>feeds:sfpmei-incoming</info> command process the incoming feeds generated by SFPMEI.
<info>php bin/console feeds:sfpmei_incoming</info>
EOF
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->entityManagerSimulator = $this->getContainer()->get('unilend.service.entity_manager');
        $entityManager                = $this->getContainer()->get('doctrine.orm.entity_manager');
        $this->logger                 = $this->getContainer()->get('monolog.logger.console');

        $projectRepository = $entityManager->getRepository(Projects::class);

        $aReceivedTransfersStatus = [05, 18, 45, 13];
        $aEmittedTransfersStatus  = [06, 21];
        $aRejectedTransfersStatus = [12];

        $aEmittedLeviesStatus  = [23, 25, 'A1', 'B1'];
        $aRejectedLeviesStatus = [10, 27, 'A3', 'B3'];

        $receptionPath = $this->getContainer()->getParameter('path.sftp') . 'sfpmei/receptions/';

        if (false === @file_get_contents($receptionPath . self::FILE_ROOT_NAME . date('Ymd') . '.txt')) {
            $this->logger->info('No SFPMEI incoming file to process in "' . $receptionPath . '"', ['class' => __CLASS__, 'function' => __FUNCTION__]);
            exit;
        }

        $aReceivedData = $this->parseReceptionFile($receptionPath . self::FILE_ROOT_NAME . date('Ymd') . '.txt', $aEmittedLeviesStatus);
        $aReception    = $entityManager->getRepository(Receptions::class)->getByDate(new \DateTime());

        if (false === empty($aReceivedData) && (empty($aReception) || $input->getOption('force-replay'))) {
            $slackManager = $this->getContainer()->get('unilend.service.slack_manager');

            foreach ($aReceivedData as $aRow) {
                $motif               = '';
                $code                = $aRow['codeOpInterbancaire'];
                $type                = Receptions::TYPE_UNKNOWN;
                $iBankTransferStatus = 0;
                $iBankDebitStatus    = 0;

                if (in_array($code, $aReceivedTransfersStatus)) {
                    $type                = Receptions::TYPE_WIRE_TRANSFER;
                    $iBankTransferStatus = Receptions::WIRE_TRANSFER_STATUS_RECEIVED;
                } elseif (in_array($code, $aEmittedTransfersStatus)) {
                    $type                = Receptions::TYPE_WIRE_TRANSFER;
                    $iBankTransferStatus = Receptions::WIRE_TRANSFER_STATUS_SENT;
                } elseif (in_array($code, $aRejectedTransfersStatus)) {
                    $type                = Receptions::TYPE_WIRE_TRANSFER;
                    $iBankTransferStatus = Receptions::WIRE_TRANSFER_STATUS_REJECTED;
                } elseif (in_array($code, $aEmittedLeviesStatus)) {
                    $type             = Receptions::TYPE_DIRECT_DEBIT;
                    $iBankDebitStatus = Receptions::DIRECT_DEBIT_STATUS_SENT;
                } elseif (in_array($code, $aRejectedLeviesStatus)) {
                    $type             = Receptions::TYPE_DIRECT_DEBIT;
                    $iBankDebitStatus = Receptions::DIRECT_DEBIT_STATUS_REJECTED;
                }

                for ($index = 1; $index <= 5; $index++) {
                    if (false === empty($aRow['libelleOpe' . $index])) {
                        $motif .= trim($aRow['libelleOpe' . $index]) . '<br>';
                    }
                }

                $status = Receptions::STATUS_PENDING;

                if (false === empty($aRow['welcomeOffer'])) {
                    $status = Receptions::STATUS_ASSIGNED_AUTO;
                    $this->processWelcomeOffer($aRow);
                }

                if (
                    in_array($aRow['codeOpInterbancaire'], [21, 30, 62])
                    || in_array(substr($motif, 0, 11), ['/FRM SFPMEI', '/FOR SFPMEI'])
                ) {
                    $status = Receptions::STATUS_IGNORED_AUTO;
                }

                $reception = new Receptions();
                $reception
                    ->setStatusBo($status)
                    ->setMotif($motif)
                    ->setMontant($aRow['montant'])
                    ->setType($type)
                    ->setStatusVirement($iBankTransferStatus)
                    ->setStatusPrelevement($iBankDebitStatus)
                    ->setLigne($aRow['ligne1'])
                    ->setTypeRemb(0)
                    ->setIdUser(null);

                $entityManager->persist($reception);

                try {
                    $entityManager->flush();

                    if ($type === Receptions::TYPE_DIRECT_DEBIT && $iBankDebitStatus === Receptions::DIRECT_DEBIT_STATUS_SENT) {
                        $this->processDirectDebit($motif, $reception);
                    } elseif ($type === Receptions::TYPE_WIRE_TRANSFER && $iBankTransferStatus === Receptions::WIRE_TRANSFER_STATUS_RECEIVED) {
                        if (
                            isset($aRow['libelleOpe3'])
                            && 1 === preg_match('/RA-?([0-9]+)/', $aRow['libelleOpe3'], $matches)
                            && $project = $projectRepository->find((int) $matches[1])
                        ) {
                            $this->processBorrowerAnticipatedRepayment($reception, $project);
                        } elseif (
                            isset($aRow['libelleOpe3'])
                            && preg_match('/([0-9]+) REGULARISATION/', $aRow['libelleOpe3'], $matches)
                            && $project = $projectRepository->find((int) $matches[1])
                        ) {
                            $this->processRegulation($reception, $project);
                        } elseif (self::FRENCH_BANK_TRANSFER_BNPP_CODE === $aRow['codeOpBNPP']) {
                            $this->processLenderBankTransfer($motif, $reception);
                        }
                    } elseif ($type === Receptions::TYPE_DIRECT_DEBIT && $iBankDebitStatus === Receptions::DIRECT_DEBIT_STATUS_REJECTED) {
                        $this->processBorrowerRepaymentRejection($aRow, $reception);
                    }
                } catch (\Exception $exception) {
                    $errorMsg = 'An error occurs when treating the daily incoming feeds (reception) from SFPMEI. Error: ' . $exception->getMessage();

                    $this->logger->alert($errorMsg, [
                        'class'        => __CLASS__,
                        'function'     => __FUNCTION__,
                        'id_reception' => $reception->getIdReception(),
                        'motif'        => $reception->getMotif(), // when no reception id
                        'line'         => $exception->getLine(),
                        'file'         => $exception->getFile()
                    ]);

                    try {
                        $channel = $this->getContainer()->getParameter('slack.monitoring_channel');
                    } catch (\InvalidArgumentException $exception) {
                        $channel = null;
                    }

                    $slackManager->sendMessage($errorMsg, $channel);

                    continue;
                }
            }
            $slackManager->sendMessage('SFPMEI - ' . count($aReceivedData) . ' opérations réceptionnées');
        }
    }

    /**
     * @param string $file
     * @param array  $aEmittedLeviesStatus
     *
     * @return array
     */
    private function parseReceptionFile(string $file, array $aEmittedLeviesStatus): array
    {
        $aPattern = [
            '{' => 0,
            'A' => 1,
            'B' => 2,
            'C' => 3,
            'D' => 4,
            'E' => 5,
            'F' => 6,
            'G' => 7,
            'H' => 8,
            'I' => 9,
            '}' => 0,
            'J' => 1,
            'K' => 2,
            'L' => 3,
            'M' => 4,
            'N' => 5,
            'O' => 6,
            'P' => 7,
            'Q' => 8,
            'R' => 9
        ];

        $aResult  = [];
        $rHandler = fopen($file, 'r');

        if ($rHandler) {
            $i = 0;
            while (($sLine = fgets($rHandler)) !== false) {
                $sLine       = trim($sLine, "\n\r");
                $sRecordCode = substr($sLine, 0, 2);

                if ($sRecordCode == 04) {
                    $i++;
                    $iLine = 1;

                    $aResult[$i]['codeEnregi']          = substr($sLine, 0, 2);
                    $aResult[$i]['codeBanque']          = substr($sLine, 2, 5);
                    $aResult[$i]['codeOpBNPP']          = substr($sLine, 7, 4);
                    $aResult[$i]['codeGuichet']         = substr($sLine, 11, 5);
                    $aResult[$i]['codeDevises']         = substr($sLine, 16, 3);
                    $aResult[$i]['nbDecimales']         = substr($sLine, 19, 1);
                    $aResult[$i]['zoneReserv1']         = substr($sLine, 20, 1);
                    $aResult[$i]['numCompte']           = substr($sLine, 21, 11);
                    $aResult[$i]['codeOpInterbancaire'] = substr($sLine, 32, 2);
                    $aResult[$i]['dateEcriture']        = substr($sLine, 34, 6);
                    $aResult[$i]['codeMotifRejet']      = substr($sLine, 40, 2);
                    $aResult[$i]['dateValeur']          = substr($sLine, 42, 6);
                    $aResult[$i]['zoneReserv2']         = substr($sLine, 79, 2);
                    $aResult[$i]['numEcriture']         = substr($sLine, 81, 7);
                    $aResult[$i]['codeExoneration']     = substr($sLine, 88, 1);
                    $aResult[$i]['zoneReserv3']         = substr($sLine, 89, 1);
                    $aResult[$i]['refOp']               = substr($sLine, 104, 16);
                    $aResult[$i]['ligne1']              = $sLine;
                    $aResult[$i]['welcomeOffer']        = false !== strpos($sLine, 'BIENVENUE');

                    if (false === in_array(substr($sLine, 32, 2), $aEmittedLeviesStatus)) {
                        $aResult[$i]['libelleOpe1'] = substr($sLine, 48, 31);
                    }
                    $amount                 = substr($sLine, 90, 14);
                    $sFirstAmountPart       = ltrim(substr($amount, 0, 13), '0');
                    $sLastAmountPart        = substr($amount, -1, 1);
                    $aResult[$i]['montant'] = $sFirstAmountPart . $aPattern[$sLastAmountPart];
                }

                if ($sRecordCode == 05) {
                    if (false !== strpos($sLine, 'BIENVENUE')) {
                        $aResult[$i]['welcomeOffer'] = true;
                    }

                    if (in_array(substr($sLine, 32, 2), $aEmittedLeviesStatus)) {
                        if (in_array(trim(substr($sLine, 45, 3)), ['LCC', 'LC2'])) {
                            $iLine                              += 1;
                            $aResult[$i]['libelleOpe' . $iLine] = trim(substr($sLine, 45));
                        }
                    } else {
                        $iLine                              += 1;
                        $aResult[$i]['libelleOpe' . $iLine] = trim(substr($sLine, 45));
                    }
                }
            }

            fclose($rHandler);
        } else {
            $this->logger->error('SFPMEI incoming file "' . $file . '" not processed');
        }

        return $aResult;
    }

    /**
     * @param array $aRow
     */
    private function processWelcomeOffer(array $aRow): void
    {
        $amount = round(bcdiv($aRow['montant'], 100, 4), 2);
        $this->getContainer()->get('unilend.service.operation_manager')->provisionUnilendPromotionalWallet($amount);
    }

    /**
     * @param string     $motif
     * @param Receptions $reception
     *
     * @throws \Exception
     */
    private function processDirectDebit(string $motif, Receptions $reception): void
    {
        if (1 === preg_match('#[0-9]+#', $motif, $extract)) {
            $entityManager = $this->getContainer()->get('doctrine.orm.entity_manager');
            $projectId     = (int) $extract[0];
            /** @var EcheanciersEmprunteur $unpaidSchedule */
            $unpaidSchedule = $entityManager->getRepository(EcheanciersEmprunteur::class)
                ->findOneBy(['idProject' => $projectId, 'statusEmprunteur' => [EcheanciersEmprunteur::STATUS_PENDING, EcheanciersEmprunteur::STATUS_PARTIALLY_PAID]], ['ordre' => 'ASC']);

            if ($unpaidSchedule) {
                /** @var Prelevements $bankDirectDebit */
                $bankDirectDebit = $entityManager->getRepository(Prelevements::class)
                    ->findOneBy(['idProject' => $projectId, 'numPrelevement' => $unpaidSchedule->getOrdre()]);

                if ($bankDirectDebit && false !== strpos($motif, $bankDirectDebit->getMotif())) {
                    $operationManager      = $this->getContainer()->get('unilend.service.operation_manager');
                    $projectPaymentManager = $this->getContainer()->get('unilend.service_repayment.project_payment_manager');

                    $project = $entityManager->getRepository(Projects::class)->find($projectId);

                    if ($project instanceof Projects) {
                        $reception
                            ->setIdProject($project)
                            ->setIdClient($project->getIdCompany()->getIdClientOwner())
                            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
                            ->setAssignmentDate(new \DateTime());
                        $entityManager->flush();

                        $operationManager->provisionBorrowerWallet($reception);

                        if ($project->getStatus() === ProjectsStatus::STATUS_REPAYMENT) {
                            $user = $entityManager->getRepository(Users::class)->find(Users::USER_ID_CRON);
                            $projectPaymentManager->pay($reception, $user);
                        }
                    }
                }
            }
        }
    }

    /**
     * @param Receptions $reception
     * @param Projects   $project
     *
     * @throws \Exception
     */
    private function processBorrowerAnticipatedRepayment(Receptions $reception, Projects $project): void
    {
        $entityManager               = $this->getContainer()->get('doctrine.orm.entity_manager');
        $operationManager            = $this->getContainer()->get('unilend.service.operation_manager');
        $projectRepaymentTaskManager = $this->getContainer()->get('unilend.service_repayment.project_repayment_task_manager');

        $reception
            ->setIdProject($project)
            ->setIdClient($project->getIdCompany()->getIdClientOwner())
            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
            ->setTypeRemb(Receptions::REPAYMENT_TYPE_EARLY)
            ->setAssignmentDate(new \DateTime());
        $entityManager->flush();

        $operationManager->provisionBorrowerWallet($reception);
        $user = $entityManager->getRepository(Users::class)->find(Users::USER_ID_CRON);
        $projectRepaymentTaskManager->planEarlyRepaymentTask($project, $reception, $user);
    }

    /**
     * @param Receptions $reception
     * @param Projects   $project
     *
     * @throws \Exception
     */
    private function processRegulation(Receptions $reception, Projects $project): void
    {
        $entityManager         = $this->getContainer()->get('doctrine.orm.entity_manager');
        $operationManager      = $this->getContainer()->get('unilend.service.operation_manager');
        $projectPaymentManager = $this->getContainer()->get('unilend.service_repayment.project_payment_manager');

        $reception
            ->setIdProject($project)
            ->setIdClient($project->getIdCompany()->getIdClientOwner())
            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
            ->setTypeRemb(Receptions::REPAYMENT_TYPE_REGULARISATION)
            ->setAssignmentDate(new \DateTime());
        $entityManager->flush();

        $operationManager->provisionBorrowerWallet($reception);

        if ($project->getStatus() === ProjectsStatus::STATUS_REPAYMENT) {
            $user = $entityManager->getRepository(Users::class)->find(Users::USER_ID_CRON);
            $projectPaymentManager->pay($reception, $user);
        }
    }

    /**
     * @param string     $pattern
     * @param Receptions $reception
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function processLenderBankTransfer(string $pattern, Receptions $reception): void
    {
        /** @var \notifications $notifications */
        $notifications = $this->entityManagerSimulator->getRepository('notifications');
        /** @var \clients_gestion_notifications $clients_gestion_notifications */
        $clients_gestion_notifications = $this->entityManagerSimulator->getRepository('clients_gestion_notifications');
        /** @var \clients_gestion_mails_notif $clients_gestion_mails_notif */
        $clients_gestion_mails_notif = $this->entityManagerSimulator->getRepository('clients_gestion_mails_notif');

        $entityManager   = $this->getContainer()->get('doctrine.orm.entity_manager');
        $numberFormatter = $this->getContainer()->get('number_formatter');

        $operationRepository = $entityManager->getRepository(Operation::class);

        if (1 === preg_match('/([0-9]{6}) ?[A-Z]+/', $pattern, $matches)) {
            $client = $entityManager->getRepository(Clients::class)->find((int) $matches[1]);
            if ($client instanceof Clients) {
                /** @var Wallet $wallet */
                $wallet = $entityManager->getRepository(Wallet::class)->getWalletByType($client, WalletType::LENDER);
                if (null !== $wallet) {
                    $pattern       = str_replace(' ', '', $pattern);
                    $lenderPattern = str_replace(' ', '', $wallet->getWireTransferPattern());

                    if (false !== strpos($pattern, $lenderPattern)) {
                        $reception
                            ->setIdClient($wallet->getIdClient())
                            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO);
                        $entityManager->flush();

                        $this->getContainer()->get('unilend.service.operation_manager')->provisionLenderWallet($wallet, $reception);

                        if ($client->getEtapeInscriptionPreteur() < Clients::SUBSCRIPTION_STEP_MONEY_DEPOSIT) {
                            $client->setEtapeInscriptionPreteur(Clients::SUBSCRIPTION_STEP_MONEY_DEPOSIT);
                            $entityManager->flush($client);
                        }

                        if ($client->isGrantedLogin()) {
                            $notifications->type      = Notifications::TYPE_BANK_TRANSFER_CREDIT;
                            $notifications->id_lender = $wallet->getId();
                            $notifications->amount    = $reception->getMontant();
                            $notifications->create();

                            $provisionOperation   = $operationRepository->findOneBy(['idWireTransferIn' => $reception]);
                            $walletBalanceHistory = $entityManager->getRepository(WalletBalanceHistory::class)->findOneBy([
                                'idOperation' => $provisionOperation,
                                'idWallet'    => $wallet
                            ]);

                            $clients_gestion_mails_notif->id_client                 = $client->getIdClient();
                            $clients_gestion_mails_notif->id_notif                  = ClientsGestionTypeNotif::TYPE_BANK_TRANSFER_CREDIT;
                            $clients_gestion_mails_notif->date_notif                = date('Y-m-d H:i:s');
                            $clients_gestion_mails_notif->id_notification           = $notifications->id_notification;
                            $clients_gestion_mails_notif->id_wallet_balance_history = $walletBalanceHistory->getId();
                            $clients_gestion_mails_notif->create();

                            if ($clients_gestion_notifications->getNotif($client->getIdClient(), ClientsGestionTypeNotif::TYPE_BANK_TRANSFER_CREDIT, 'immediatement')) {
                                $clients_gestion_mails_notif->get($clients_gestion_mails_notif->id_clients_gestion_mails_notif, 'id_clients_gestion_mails_notif');
                                $clients_gestion_mails_notif->immediatement = 1;
                                $clients_gestion_mails_notif->update();

                                $keywords = [
                                    'firstName'        => $client->getPrenom(),
                                    'depositAmount'    => $numberFormatter->format(round(bcdiv($reception->getMontant(), 100, 4), 2)),
                                    'availableBalance' => $numberFormatter->format((float) $wallet->getAvailableBalance()),
                                    'lenderPattern'    => $wallet->getWireTransferPattern(),
                                ];

                                $message = $this->getContainer()->get('unilend.swiftmailer.message_provider')->newMessage('preteur-alimentation-virement', $keywords);

                                try {
                                    $message->setTo($client->getEmail());
                                    $mailer = $this->getContainer()->get('mailer');
                                    $mailer->send($message);
                                } catch (\Exception $exception) {
                                    $this->getContainer()->get('monolog.logger.console')->warning(
                                        'Could not send email: preteur-alimentation-virement - Exception: ' . $exception->getMessage(),
                                        ['id_mail_template' => $message->getTemplateId(), 'id_client' => $client->getIdClient(), 'class' => __CLASS__, 'function' => __FUNCTION__]
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * @param array      $aRow
     * @param Receptions $reception
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    private function processBorrowerRepaymentRejection(array $aRow, Receptions $reception): void
    {
        $entityManager         = $this->getContainer()->get('doctrine.orm.entity_manager');
        $operationManager      = $this->getContainer()->get('unilend.service.operation_manager');

        if (1 === preg_match('#^RUM[^0-9]*([0-9]+)#', $aRow['libelleOpe3'], $matches)) {
            /** @var Projects $project */
            $project = $entityManager->getRepository(Projects::class)->find((int) $matches[1]);

            if (1 === preg_match('#^RCNUNILEND/([0-9]{8})/([0-9]+)#', $aRow['libelleOpe4'], $matches)) {
                $from                        = \DateTime::createFromFormat('Ymd', $matches[1]);
                $originalRejectedDirectDebit = $entityManager->getRepository(Receptions::class)->findOriginalDirectDebitByRejectedOne($project, $from);

                if ($project && $originalRejectedDirectDebit) {
                    $project->setRembAuto(Projects::AUTO_REPAYMENT_OFF);
                    $entityManager->flush();

                    /** @var Wallet $wallet */
                    $wallet = $entityManager->getRepository(Wallet::class)->getWalletByType($project->getIdCompany()->getIdClientOwner(), WalletType::BORROWER);

                    if ($wallet) {
                        $reception
                            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
                            ->setIdProject($project)
                            ->setIdClient($wallet->getIdClient())
                            ->setRejectionIsoCode($this->getRejectionIsoCode($aRow))
                            ->setIdReceptionRejected($originalRejectedDirectDebit);
                        $entityManager->flush();

                        $amount = round(bcdiv($reception->getMontant(), 100, 4), 2);
                        $operationManager->cancelProvisionBorrowerWallet($wallet, $amount, $reception);

                        if (null === $project->getCloseOutNettingDate()) {
                            $projectPaymentManager = $this->getContainer()->get('unilend.service_repayment.project_payment_manager');
                        } else {
                            $projectPaymentManager = $this->getContainer()->get('unilend.service_repayment.project_close_out_netting_payment_manager');
                        }

                        $user = $entityManager->getRepository(Users::class)->find(Users::USER_ID_CRON);
                        $projectPaymentManager->rejectPayment($originalRejectedDirectDebit, $user);

                        $this->sendBorrowerRepaymentRejectionNotification($reception);
                    }
                }
            }
        }
    }

    /**
     * @param array $row
     *
     * @return null|SepaRejectionReason
     */
    private function getRejectionIsoCode(array $row): ?SepaRejectionReason
    {
        if (false === empty($row['libelleOpe6']) && false !== ($isoCode = substr($row['libelleOpe6'], -4, 4))) {
            return $this->getContainer()->get('doctrine.orm.entity_manager')
                ->getRepository(SepaRejectionReason::class)
                ->findOneBy(['isoCode' => $isoCode]);
        }

        return null;
    }

    /**
     * @param Receptions $wireTransferIn
     */
    private function sendBorrowerRepaymentRejectionNotification(Receptions $wireTransferIn): void
    {
        $motive = '';
        if ($wireTransferIn->getRejectionIsoCode() instanceof SepaRejectionReason) {
            $motive = ' Motif: ' . $wireTransferIn->getRejectionIsoCode()->getIsoCode() . ' (*' . $wireTransferIn->getRejectionIsoCode()->getLabel() . '*)';
        }

        $slackManager = $this->getContainer()->get('unilend.service.slack_manager');
        $slackManager->sendMessage('SFPMEI - *Rejet* - Projet: ' . $slackManager->getProjectName($wireTransferIn->getIdProject()) .
            ' - La réception (ID: ' . $wireTransferIn->getIdReceptionRejected()->getIdReception() . ') *du ' . $wireTransferIn->getIdReceptionRejected()->getAdded()->format('d/m/Y') . '* a été rejetée.' . $motive);
    }
}
