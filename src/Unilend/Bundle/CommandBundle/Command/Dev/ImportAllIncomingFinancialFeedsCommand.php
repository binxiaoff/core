<?php

namespace Unilend\Bundle\CommandBundle\Command\Dev;

use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\{
    Input\InputInterface, Output\OutputInterface
};
use Unilend\Bundle\CoreBusinessBundle\Entity\{
    Clients, Projects, Receptions, SepaRejectionReason, Wallet, WalletType
};
use Unilend\Bundle\CoreBusinessBundle\Service\Simulator\EntityManager as EntityManagerSimulator;

class ImportAllIncomingFinancialFeedsCommand extends ContainerAwareCommand
{
    const FILE_ROOT_NAME                 = 'UNILEND-00040631007-';
    const FRENCH_BANK_TRANSFER_BNPP_CODE = '0568';

    /** @var LoggerInterface */
    private $logger;

    /** @var EntityManagerSimulator */
    private $entityManagerSimulator;

    protected function configure()
    {
        $this
            ->setName('unilend:dev_tools:incoming_financial_feeds:import')
            ->setDescription('Re-import all the incoming files generated by SFPMEI from a folder. It can be used to re-build the historical data from the very beginning. Please don\'t delete it' )
            ->setHelp(<<<EOF
The <info>unilend:dev_tools:incoming_financial_feeds:import</info> command import all the incoming files generated by SFPMEI in the folder.
It creates juste the lines in "receptions" table. It won\'t change the balance of any wallet. You may need to TRUNCATE the "receptions" table before run this command.
<info>php bin/console unilend:dev_tools:incoming_financial_feeds:import</info>
EOF
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->entityManagerSimulator = $this->getContainer()->get('unilend.service.entity_manager');
        $entityManager                = $this->getContainer()->get('doctrine.orm.entity_manager');
        $this->logger                 = $this->getContainer()->get('monolog.logger.console');

        $projectRepository = $entityManager->getRepository('UnilendCoreBusinessBundle:Projects');

        $aReceivedTransfersStatus = [05, 18, 45, 13];
        $aEmittedTransfersStatus  = [06, 21];
        $aRejectedTransfersStatus = [12];

        $aEmittedLeviesStatus  = [23, 25, 'A1', 'B1'];
        $aRejectedLeviesStatus = [10, 27, 'A3', 'B3'];

        $receptionPath = $this->getContainer()->getParameter('path.sftp') . 'sfpmei/receptions/';

        $receptionFiles = array_diff(scandir($receptionPath), array('.', '..'));

        foreach ($receptionFiles as $file) {

            preg_match('/UNILEND-00040631007-([0-9]{8})\.txt/', $file, $matches);

            $fileDate = \DateTime::createFromFormat('Ymd', $matches[1]);

            $aReceivedData = $this->parseReceptionFile($receptionPath . $file, $aEmittedLeviesStatus);

            if (false === empty($aReceivedData)) {
                foreach ($aReceivedData as $aRow) {
                    $motif               = '';
                    $code                = $aRow['codeOpInterbancaire'];
                    $type                = Receptions::TYPE_UNKNOWN;
                    $iBankTransferStatus = 0;
                    $iBankDebitStatus    = 0;

                    if (in_array($code, $aReceivedTransfersStatus)) {
                        $type                = Receptions::TYPE_WIRE_TRANSFER;
                        $iBankTransferStatus = Receptions::WIRE_TRANSFER_STATUS_RECEIVED;
                    } elseif (in_array($code, $aEmittedTransfersStatus)) {
                        $type                = Receptions::TYPE_WIRE_TRANSFER;
                        $iBankTransferStatus = Receptions::WIRE_TRANSFER_STATUS_SENT;
                    } elseif (in_array($code, $aRejectedTransfersStatus)) {
                        $type                = Receptions::TYPE_WIRE_TRANSFER;
                        $iBankTransferStatus = Receptions::WIRE_TRANSFER_STATUS_REJECTED;
                    } elseif (in_array($code, $aEmittedLeviesStatus)) {
                        $type             = Receptions::TYPE_DIRECT_DEBIT;
                        $iBankDebitStatus = Receptions::DIRECT_DEBIT_STATUS_SENT;
                    } elseif (in_array($code, $aRejectedLeviesStatus)) {
                        $type             = Receptions::TYPE_DIRECT_DEBIT;
                        $iBankDebitStatus = Receptions::DIRECT_DEBIT_STATUS_REJECTED;
                    }

                    for ($index = 1; $index <= 5; $index++) {
                        if (false === empty($aRow['libelleOpe' . $index])) {
                            $motif .= trim($aRow['libelleOpe' . $index]) . '<br>';
                        }
                    }

                    $status = Receptions::STATUS_PENDING;

                    if (
                        in_array($aRow['codeOpInterbancaire'], [21, 30, 62])
                        || in_array(substr($motif, 0, 11), ['/FRM SFPMEI', '/FOR SFPMEI'])
                    ) {
                        $status = Receptions::STATUS_IGNORED_AUTO;
                    }

                    $reception = new Receptions();
                    $reception
                        ->setStatusBo($status)
                        ->setMotif($motif)
                        ->setMontant($aRow['montant'])
                        ->setType($type)
                        ->setStatusVirement($iBankTransferStatus)
                        ->setStatusPrelevement($iBankDebitStatus)
                        ->setLigne($aRow['ligne1'])
                        ->setTypeRemb(0)
                        ->setIdUser(null)
                        ->setAdded($fileDate);

                    $entityManager->persist($reception);
                    $entityManager->flush($reception);

                    if ($type === Receptions::TYPE_DIRECT_DEBIT && $iBankDebitStatus === Receptions::DIRECT_DEBIT_STATUS_SENT) {
                        $this->processDirectDebit($motif, $reception);
                    } elseif ($type === Receptions::TYPE_WIRE_TRANSFER && $iBankTransferStatus === Receptions::WIRE_TRANSFER_STATUS_RECEIVED) {
                        if (
                            isset($aRow['libelleOpe3'])
                            && 1 === preg_match('/RA-?([0-9]+)/', $aRow['libelleOpe3'], $matches)
                            && $project = $projectRepository->find((int) $matches[1])
                        ) {
                            $this->processBorrowerAnticipatedRepayment($reception, $project);
                        } elseif (
                            isset($aRow['libelleOpe3'])
                            && preg_match('/([0-9]+) REGULARISATION/', $aRow['libelleOpe3'], $matches)
                            && $project = $projectRepository->find((int) $matches[1])
                        ) {
                            $this->processRegulation($reception, $project);
                        } elseif (self::FRENCH_BANK_TRANSFER_BNPP_CODE === $aRow['codeOpBNPP']) {
                            $this->processLenderBankTransfer($motif, $reception);
                        }
                    } elseif ($type === Receptions::TYPE_DIRECT_DEBIT && $iBankDebitStatus === Receptions::DIRECT_DEBIT_STATUS_REJECTED) {
                        $this->processBorrowerRepaymentRejection($aRow, $reception);
                    }
                }

            }
        }
    }

    /**
     * @param string $file
     * @param array  $aEmittedLeviesStatus
     *
     * @return array
     */
    private function parseReceptionFile(string $file, array $aEmittedLeviesStatus): array
    {
        $aPattern = [
            '{' => 0,
            'A' => 1,
            'B' => 2,
            'C' => 3,
            'D' => 4,
            'E' => 5,
            'F' => 6,
            'G' => 7,
            'H' => 8,
            'I' => 9,
            '}' => 0,
            'J' => 1,
            'K' => 2,
            'L' => 3,
            'M' => 4,
            'N' => 5,
            'O' => 6,
            'P' => 7,
            'Q' => 8,
            'R' => 9
        ];

        $aResult  = [];
        $rHandler = fopen($file, 'r');

        if ($rHandler) {
            $i = 0;
            while (($sLine = fgets($rHandler)) !== false) {
                $sLine       = trim($sLine, "\n\r");
                $sRecordCode = substr($sLine, 0, 2);

                if ($sRecordCode == 04) {
                    $i++;
                    $iLine = 1;

                    $aResult[$i]['codeEnregi']          = substr($sLine, 0, 2);
                    $aResult[$i]['codeBanque']          = substr($sLine, 2, 5);
                    $aResult[$i]['codeOpBNPP']          = substr($sLine, 7, 4);
                    $aResult[$i]['codeGuichet']         = substr($sLine, 11, 5);
                    $aResult[$i]['codeDevises']         = substr($sLine, 16, 3);
                    $aResult[$i]['nbDecimales']         = substr($sLine, 19, 1);
                    $aResult[$i]['zoneReserv1']         = substr($sLine, 20, 1);
                    $aResult[$i]['numCompte']           = substr($sLine, 21, 11);
                    $aResult[$i]['codeOpInterbancaire'] = substr($sLine, 32, 2);
                    $aResult[$i]['dateEcriture']        = substr($sLine, 34, 6);
                    $aResult[$i]['codeMotifRejet']      = substr($sLine, 40, 2);
                    $aResult[$i]['dateValeur']          = substr($sLine, 42, 6);
                    $aResult[$i]['zoneReserv2']         = substr($sLine, 79, 2);
                    $aResult[$i]['numEcriture']         = substr($sLine, 81, 7);
                    $aResult[$i]['codeExoneration']     = substr($sLine, 88, 1);
                    $aResult[$i]['zoneReserv3']         = substr($sLine, 89, 1);
                    $aResult[$i]['refOp']               = substr($sLine, 104, 16);
                    $aResult[$i]['ligne1']              = $sLine;
                    $aResult[$i]['welcomeOffer']        = false !== strpos($sLine, 'BIENVENUE');

                    if (false === in_array(substr($sLine, 32, 2), $aEmittedLeviesStatus)) {
                        $aResult[$i]['libelleOpe1'] = substr($sLine, 48, 31);
                    }
                    $amount                 = substr($sLine, 90, 14);
                    $sFirstAmountPart       = ltrim(substr($amount, 0, 13), '0');
                    $sLastAmountPart        = substr($amount, -1, 1);
                    $aResult[$i]['montant'] = $sFirstAmountPart . $aPattern[$sLastAmountPart];
                }

                if ($sRecordCode == 05) {
                    if (false !== strpos($sLine, 'BIENVENUE')) {
                        $aResult[$i]['welcomeOffer'] = true;
                    }

                    if (in_array(substr($sLine, 32, 2), $aEmittedLeviesStatus)) {
                        if (in_array(trim(substr($sLine, 45, 3)), ['LCC', 'LC2'])) {
                            $iLine                              += 1;
                            $aResult[$i]['libelleOpe' . $iLine] = trim(substr($sLine, 45));
                        }
                    } else {
                        $iLine                              += 1;
                        $aResult[$i]['libelleOpe' . $iLine] = trim(substr($sLine, 45));
                    }
                }
            }

            fclose($rHandler);
        } else {
            $this->logger->error('SFPMEI incoming file "' . $file . '" not processed');
        }

        return $aResult;
    }

    /**
     * @param string     $motif
     * @param Receptions $reception
     *
     * @throws \Exception
     */
    private function processDirectDebit(string $motif, Receptions $reception): void
    {
        if (1 === preg_match('#[0-9]+#', $motif, $extract)) {
            $entityManager = $this->getContainer()->get('doctrine.orm.entity_manager');
            $projectId     = (int) $extract[0];

            $project = $entityManager->getRepository('UnilendCoreBusinessBundle:Projects')->find($projectId);

            if ($project instanceof Projects) {
                $reception
                    ->setIdProject($project)
                    ->setIdClient($project->getIdCompany()->getIdClientOwner())
                    ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
                    ->setAssignmentDate(new \DateTime());
                $entityManager->flush($reception);
            }
        }
    }

    /**
     * @param Receptions $reception
     * @param Projects   $project
     *
     * @throws \Exception
     */
    private function processBorrowerAnticipatedRepayment(Receptions $reception, Projects $project)
    {
        $entityManager = $this->getContainer()->get('doctrine.orm.entity_manager');

        $reception
            ->setIdProject($project)
            ->setIdClient($project->getIdCompany()->getIdClientOwner())
            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
            ->setTypeRemb(Receptions::REPAYMENT_TYPE_EARLY)
            ->setAssignmentDate(new \DateTime());
        $entityManager->flush($reception);
    }

    /**
     * @param Receptions $reception
     * @param Projects   $project
     *
     * @throws \Exception
     */
    private function processRegulation(Receptions $reception, Projects $project)
    {
        $entityManager = $this->getContainer()->get('doctrine.orm.entity_manager');

        $reception
            ->setIdProject($project)
            ->setIdClient($project->getIdCompany()->getIdClientOwner())
            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
            ->setTypeRemb(Receptions::REPAYMENT_TYPE_REGULARISATION)
            ->setAssignmentDate(new \DateTime());
        $entityManager->flush($reception);
    }

    /**
     * @param            $pattern
     * @param Receptions $reception
     *
     * @throws \Exception
     */
    private function processLenderBankTransfer($pattern, Receptions $reception)
    {
        $entityManager = $this->getContainer()->get('doctrine.orm.entity_manager');

        if (1 === preg_match('/([0-9]{6}) ?[A-Z]+/', $pattern, $matches)) {
            $client = $entityManager->getRepository('UnilendCoreBusinessBundle:Clients')->find((int) $matches[1]);
            if ($client instanceof Clients) {
                /** @var Wallet $wallet */
                $wallet = $entityManager->getRepository('UnilendCoreBusinessBundle:Wallet')->getWalletByType($client, WalletType::LENDER);
                if (null !== $wallet) {
                    $pattern       = str_replace(' ', '', $pattern);
                    $lenderPattern = str_replace(' ', '', $wallet->getWireTransferPattern());

                    if (false !== strpos($pattern, $lenderPattern)) {
                        $reception
                            ->setIdClient($wallet->getIdClient())
                            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO);
                        $entityManager->flush($reception);
                    }
                }
            }
        }
    }

    /**
     * @param array      $aRow
     * @param Receptions $reception
     *
     * @throws \Exception
     */
    private function processBorrowerRepaymentRejection(array $aRow, Receptions $reception)
    {
        $entityManager = $this->getContainer()->get('doctrine.orm.entity_manager');

        if (isset($aRow['libelleOpe3']) && 1 === preg_match('#^RUM[^0-9]*([0-9]+)#', $aRow['libelleOpe3'], $matches)) {
            /** @var Projects $project */
            $project = $entityManager->getRepository('UnilendCoreBusinessBundle:Projects')->find((int) $matches[1]);

            if (1 === preg_match('#^RCNUNILEND/([0-9]{8})/([0-9]+)#', $aRow['libelleOpe4'], $matches)) {
                $from                        = \DateTime::createFromFormat('Ymd', $matches[1]);
                $originalRejectedDirectDebit = $entityManager->getRepository('UnilendCoreBusinessBundle:Receptions')->findOriginalDirectDebitByRejectedOne($project, $from);

                if ($project && $originalRejectedDirectDebit) {
                    /** @var Wallet $wallet */
                    $wallet = $entityManager->getRepository('UnilendCoreBusinessBundle:Wallet')->getWalletByType($project->getIdCompany()->getIdClientOwner(), WalletType::BORROWER);

                    if ($wallet) {
                        $reception
                            ->setStatusBo(Receptions::STATUS_ASSIGNED_AUTO)
                            ->setIdProject($project)
                            ->setIdClient($wallet->getIdClient())
                            ->setRejectionIsoCode($this->getRejectionIsoCode($aRow))
                            ->setIdReceptionRejected($originalRejectedDirectDebit);
                        $entityManager->flush($reception);

                    }
                }
            }
        }
    }

    /**
     * @param array $row
     *
     * @return null|SepaRejectionReason
     */
    private function getRejectionIsoCode(array $row): ?SepaRejectionReason
    {
        if (false === empty($row['libelleOpe6']) && false !== ($isoCode = substr($row['libelleOpe6'], -4, 4))) {
            return $this->getContainer()->get('doctrine.orm.entity_manager')
                ->getRepository('UnilendCoreBusinessBundle:SepaRejectionReason')
                ->findOneBy(['isoCode' => $isoCode]);
        }

        return null;
    }
}
