security:
    enable_authenticator_manager: true

    encoders:
        KLS\Core\Entity\User:
            algorithm: 'auto'

    providers:
        database_users:
            entity: { class: KLS\Core\Entity\User, property: email }

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt|error)|css|images|js)/
            security: false
        login:
            pattern: ^/core/authentication_token$
            stateless: true
            json_login:
                check_path: /core/authentication_token
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            <<: &firewall_shared_configuration
                user_checker: KLS\Core\Security\UserChecker
                login_throttling:
                    limiter: app.login_rate_limiter
        api:
            stateless: true
            # the login attempts limiting doesn't work for the jwt, as the jwt decoder throws an exception for an invalid jwt before the authentication process
            jwt: ~
            guard:
                authenticators:
                    - KLS\Core\Security\TemporaryTokenAuthenticator
            entry_point: jwt
            <<: *firewall_shared_configuration

    access_control:
        - { path: '^/captcha_checks', allow_if: "is_anonymous()" }
        - { path: '^/core/authentication_token', allow_if: "is_anonymous()" }
        - { path: '^/core/legal_documents', allow_if: "is_authenticated() or is_anonymous()" }
        - { path: '^/core/pulse$', allow_if: "is_anonymous()" }
        - { path: '^/core/reset_passwords$', allow_if: "is_anonymous()" }
        - { path: '^/core/temporary_tokens', allow_if: "is_anonymous()" }
        - { path: '^/core/token/refresh', allow_if: "is_authenticated() or is_anonymous()" }
        - { path: '^/docs', allow_if: "is_authenticated() or is_anonymous()" }
        - { path: '^/.+', allow_if: 'is_authenticated()' }
