==========================================
Tests
==========================================

Tests are very useful in any application. They help to catch regressions before they make it to deployment and forces us
to better structure the code. They also help to see unwanted impact generated by new features.


Unit Test
===============

Unit testing allow us to quickly test each class in isolation.
We use PHPUnit_ to write the tests and Prophecy_ to mock the dependencies in the tests. Please refer to these tools page for more information.

Creation
--------
- The testing class is suffixed by Test (``DataCryptoTest`` class related to ``DataCrypto`` class).
- The testing class have to respect the folder structure in ``tests`` folder as in ``src`` (``tests\Core\Unit\Service\DataCryptoTest`` for ``src\Core\Service\DataCrypto``).
- A testing class have to extend ``PHPUnit\Framework\TestCase`` class and implement the needed functions for testing.
- Favor implementing ``setUp()`` and ``tearDown()`` methods in case of a lot of dependencies in a class to test, to avoid to mock in each testing method.
- One testing class for one class to test, and one testing method for one (public) method of the class to test.
- Above each testing class should have ``@coversDefaultClass`` and ``@internal`` annotations.
- Above each testing method should have at least ``@covers`` annotation that refers the method to test.
- A testing method should have at least one assertion.
- Favor ``@dataProvider`` to test with multiple data.
- Each entry of the ``@dataProvider`` should have a key describing the testing case for the related dataset.
- The testing class object must not be mocked.
- All dependencies must be mocked.
- Entities must not be mocked either.
- For entities with a hard complexity to create, favor to create traits (if not exist) in their folder instead of private methods or abstract classes.


Functional Test
===============

Functional testing allow us to test a feature, an end-to-end.
